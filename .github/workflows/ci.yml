name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mlc-llm:latest

jobs:

  ##############################
  # Stage 1: Build & Push Image
  ##############################
  docker-build-push:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
          platforms: linux/amd64

  ####################################
  # Stage 2: Smoke Tests
  ####################################
  docker-test:
    name: ‚úÖ Run Smoke Tests
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Run smoke tests in container
        run: |
          timeout 60s docker run --rm ${{ needs.docker-build-push.outputs.image }} ./scripts/test-image.sh
        continue-on-error: true

  ###############################
  # Stage 3: Build Wheels
  ###############################
  build-wheels:
    name: üõ†Ô∏è Build Python Wheels
    runs-on: ${{ matrix.os }}
    needs: docker-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install build tool
        run: pip install build

      - name: Build wheel
        run: |
          python -m build python/
          mv python/dist/*.whl "python/dist/mlc_llm-${{ matrix.os }}.whl"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: python/dist/mlc_llm-${{ matrix.os }}.whl

  #############################
  # Stage 4: GitHub Release
  #############################
  create-release:
    name: üöÄ Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create tag
        run: |
          TAG="mlc-llm-v${{ github.run_number }}"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            ./artifacts/wheel-ubuntu-latest/mlc_llm-ubuntu-latest.whl
            ./artifacts/wheel-windows-latest/mlc_llm-windows-latest.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #############################
  # Stage 5: Model Deployment
  #############################
  model-deploy:
    name: ‚òÅÔ∏è Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Show model being deployed üîç
        run: echo "üöÄ Deploying model: Llama-2-7b-chat-glm-4b-q0f16_0"

      - name: Ensure Fly.io app exists
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl apps create mlc-llm || echo "App already exists"

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          IMAGE_NAME: "ghcr.io/${{ github.repository_owner }}/mlc-llm:latest"
        run: |
          flyctl deploy --remote-only --image $IMAGE_NAME --app mlc-llm

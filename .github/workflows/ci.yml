name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mlc-llm:latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.IMAGE_NAME }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
          platforms: linux/amd64

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Run tests inside Docker image
        run: |
          docker run --rm ${{ needs.build-and-push.outputs.image }} ./scripts/test-image.sh

  build-wheels:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - run: pip install build

      - run: python -m build python/

      - run: |
          WHL=$(ls python/dist/*.whl)
          mv "$WHL" "python/dist/mlc_llm-${{ matrix.os }}.whl"

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: python/dist/mlc_llm-${{ matrix.os }}.whl

  release:
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release Tag
        id: tag
        run: |
          TAG="mlc-llm-v${{ github.run_number }}"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          files: |
            ./artifacts/wheel-ubuntu-latest/mlc_llm-ubuntu-latest.whl
            ./artifacts/wheel-windows-latest/mlc_llm-windows-latest.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only --image ${{ env.IMAGE_NAME }}

name: CI/CD Pipeline

# Trigger on:
#   • push to the "main" branch
#   • creation of ANY Git tag
#   • manual dispatch from the Actions UI
on:
  push:
    branches:
      - main
    tags:
      - "*"         # run whenever any tag is pushed (e.g. v1.0.0, release-2025)
  workflow_dispatch:  # allows manual “Run workflow” button in GitHub Actions UI

permissions:
  contents: write   # needed for tagging and creating a Release
  packages: write   # needed for pushing to GHCR

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mlc-llm:latest

jobs:
  ################################################################
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # fetch full history so tags and commits are available

      - name: Setup QEMU (for cross-build support)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ORG_GHCR_PAT }}   # <-- use your org‐level secret here

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
          platforms: linux/amd64

  ################################################################
  test:
    name: Run Tests Inside Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Login to GHCR (to pull the just-pushed image)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ORG_GHCR_PAT }}   # <-- use the same secret

      - name: Run test-image.sh in container (timeout 60s)
        run: |
          timeout 60s docker run --rm \
            ${{ needs.build-and-push.outputs.image }} \
            ./scripts/test-image.sh
        continue-on-error: true

  ################################################################
  build-wheels:
    name: Build Python Wheels (Linux & Windows)
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.os }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install build tool
        run: pip install --upgrade build
        shell: bash

      - name: Build wheel
        run: |
          python -m build python/
          WHL=$(ls python/dist/*.whl)
          mv "$WHL" "python/dist/mlc_llm-${{ matrix.os }}.whl"
        shell: bash

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: python/dist/mlc_llm-${{ matrix.os }}.whl

  ################################################################
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-wheels

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release Tag
        id: tag
        run: |
          TAG="mlc-llm-v${{ github.run_number }}"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          files: |
            ./artifacts/wheel-ubuntu-latest/mlc_llm-ubuntu-latest.whl
            ./artifacts/wheel-windows-latest/mlc_llm-windows-latest.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ################################################################
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Docker image to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only --image ${{ env.IMAGE_NAME }}
